global using Object = Sema.Object;
global using Range = Sema.Range;
global using RangeInfra = Sema.RangeInfra;
global using ObjectInfra = Sema.ObjectInfra;
global using StringCompare = Sema.StringCompare;
global using StringComparer = Sema.StringComparer;
global using Data = Sema.Data;
global using InfraConvert = Sema.Convert;
global using InfraConstant = Sema.Constant;
global using List = Sema.List.List;
global using Map = Sema.List.Map;
global using ListIter = Sema.List.ListIter;
global using MapIter = Sema.List.MapIter;
global using ArrayIter = Sema.List.ArrayIter;
global using IIter = Sema.List.IIter;
global using Pair = Sema.List.Pair;
global using Text = Sema.Text.Text;
global using TextPos = Sema.Text.Pos;
global using TextLine = Sema.Text.Line;
global using TextInfra = Sema.Text.Infra;
global using ModuleName = Sema.Mode.Name;
global using ModuleIntent = Sema.Mode.Int;
global using ModuleVer = Sema.Mode.Ver;
global using ModuleRefer = Sema.Mode.Ref;
global using ModuleNameCompare = Sema.Mode.NameCompare;
global using ModuleIntentCompare = Sema.Mode.IntCompare;
global using ModuleReferCompare = Sema.Mode.RefCompare;
global using ModulePath = Sema.Mode.Path;
global using Source = Case.Infra.Source;
global using SourceArray = Case.Infra.SourceArray;
global using Error = Case.Infra.Error;
global using ErrorKind = Case.Infra.ErrorKind;
global using ErrorList = Case.Infra.ErrorList;
global using TextRange = Case.Infra.TextRange;
global using Constant = Case.Infra.Constant;
global using StringInfra = Case.Infra.StringInfra;
global using ClassIndex = Case.Infra.ClassIndex;
global using ClassIndexCompare = Case.Infra.ClassIndexCompare;
global using PortPort = Case.Port.Port;
global using PortRead = Case.Port.Read;
global using PortModuleName = Case.Port.ModuleName;
global using PortModuleVer = Case.Port.ModuleVer;
global using PortImportList = Case.Port.ImportList;
global using PortExportList = Case.Port.ExportList;
global using PortEntry = Case.Port.Entry;
global using PortImport = Case.Port.Import;
global using PortExport = Case.Port.Export;
global using TokeCreate = Case.Toke.Create;
global using Code = Case.Toke.Code;
global using TokeToke = Case.Toke.Toke;
global using Comment = Case.Toke.Comment;
global using TokeResult = Case.Toke.Result;
global using NodeCreate = Case.Node.Create;
global using NodeNode = Case.Node.Node;
global using NodeResult = Case.Node.Result;
global using Tree = Case.Node.Tree;
global using TreeArray = Case.Node.TreeArray;
global using NodeList = Case.Node.NodeList;
global using CheckCreate = Case.Check.Create;
global using CheckResult = Case.Check.Result;
global using CheckCheck = Case.Check.Check;
global using CheckRefer = Case.Check.Refer;
global using CheckModule = Case.Check.Module;
global using CheckClass = Case.Check.Class;
global using CheckField = Case.Check.Field;
global using CheckMethod = Case.Check.Method;
global using CheckVar = Case.Check.Var;
global using CheckModuleMap = Case.Check.ModuleMap;
global using CheckClassMap = Case.Check.ClassMap;
global using CheckConstantClass = Case.Check.ConstantClass;
global using CheckExport = Case.Check.Export;
global using CheckExportList = Case.Check.ExportList;
global using CheckModuleEntry = Case.Check.ModuleEntry;
global using ModeCreate = Case.Mode.Create;
global using ModeResult = Case.Mode.Result;
global using Type = System.Type;
global using NullableULong = System.Nullable<ulong>;
global using SystemArray = System.Array;
global using IEnumerable = System.Collections.IEnumerable;
global using IEnumerator = System.Collections.IEnumerator;
global using StringBuilder = System.Text.StringBuilder;
global using PropertyInfo = System.Reflection.PropertyInfo;
global using FieldInfo = System.Reflection.FieldInfo;
global using BindingFlags = System.Reflection.BindingFlags;
global using PropertyInfoDictionary = System.Collections.Generic.Dictionary<string, System.Reflection.PropertyInfo>;
global using IEnumerablePropertyInfo = System.Collections.Generic.IEnumerable<System.Reflection.PropertyInfo>;
global using FieldInfoDictionary = System.Collections.Generic.Dictionary<string, System.Reflection.FieldInfo>;
global using IEnumerableFieldInfo = System.Collections.Generic.IEnumerable<System.Reflection.FieldInfo>;
global using TextWriter = System.IO.TextWriter;
global using Path = System.IO.Path;
global using Directory = System.IO.Directory;
global using File = System.IO.File;